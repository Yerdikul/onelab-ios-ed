import Cocoa

var greeting = "Hello, playground"

struct Stack<Element> {
//Инициализация: Класс должен иметь инициализатор, который создаёт пустой стек.
//push: Метод для добавления элемента в вершину стека.
//pop: Метод для удаления и возвращения элемента с вершины стека. Если стек пуст, метод должен возвращать nil.
//peek: Метод для просмотра элемента на вершине стека без его удаления. Если стек пуст, метод должен возвращать nil.
//isEmpty: Свойство, которое показывает, пуст ли стек.
//size: Свойство, которое возвращает количество элементов в стеке.
}

struct Queue {
//Инициализация: Класс должен иметь инициализатор, создающий пустую очередь.
//enqueue: Метод для добавления элемента в конец очереди.
//dequeue: Метод для удаления и возвращения элемента из начала очереди. Если очередь пуста, метод должен возвращать nil.
//peek: Метод для просмотра элемента в начале очереди без его удаления. Если очередь пуста, метод должен возвращать nil.
//isEmpty: Свойство, показывающее, пуста ли очередь.
//size: Свойство, возвращающее количество элементов в очереди.
}

struct LinkedList {
//prepend: Метод для добавления нового элемента в начало списка.
//append: Метод для добавления нового элемента в конец списка.
//remove: Метод для удаления элемента из списка. Можно реализовать удаление по значению или по индексу.
//find: метод для поиска элемента в списке по его значению, Метод возвращает первый узел, содержащий указанное значение, или nil, если такой узел не найден
//printList: Метод для печати всех значений узлов списка. Этот метод проходит по всем узлам и печатает их значения.


}
